<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="2" failed="1" ignored="6" total="30" passed="21">
  <reporter-output>
  </reporter-output>
  <suite name="CloudBlaze Automation" duration-ms="2567916" started-at="2020-04-14T06:42:09Z" finished-at="2020-04-14T07:24:57Z">
    <groups>
      <group name="Smoke">
        <method signature="FullLoad.verifySystemParams()[pri:11, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifySystemParams" class="com.Fullload_CDC.FullLoad"/>
        <method signature="FullLoad.verifyServicePrinciple()[pri:12, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyServicePrinciple" class="com.Fullload_CDC.FullLoad"/>
        <method signature="FullLoad.verifySubscription()[pri:13, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifySubscription" class="com.Fullload_CDC.FullLoad"/>
        <method signature="FullLoad.verifyAddDataFactory()[pri:14, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyAddDataFactory" class="com.Fullload_CDC.FullLoad"/>
        <method signature="FullLoad.verifyAddSendgrid()[pri:15, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyAddSendgrid" class="com.Fullload_CDC.FullLoad"/>
        <method signature="FullLoad.verifyAddAzureFunction()[pri:16, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyAddAzureFunction" class="com.Fullload_CDC.FullLoad"/>
        <method signature="FullLoad.verifySourceAdd()[pri:17, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifySourceAdd" class="com.Fullload_CDC.FullLoad"/>
        <method signature="FullLoad.verifyAddDestination()[pri:18, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyAddDestination" class="com.Fullload_CDC.FullLoad"/>
        <method signature="FullLoad.verifyAddDataFlow()[pri:19, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyAddDataFlow" class="com.Fullload_CDC.FullLoad"/>
        <method signature="FullLoad.verifyScheduledFlow()[pri:20, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyScheduledFlow" class="com.Fullload_CDC.FullLoad"/>
        <method signature="FullLoad.verifyFlowOnMontioringScreen()[pri:21, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyFlowOnMontioringScreen" class="com.Fullload_CDC.FullLoad"/>
        <method signature="OracleToAdlsCDC.verifySourceAdd()[pri:31, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifySourceAdd" class="com.Fullload_CDC.OracleToAdlsCDC"/>
        <method signature="OracleToAdlsCDC.verifyAddDestination()[pri:32, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyAddDestination" class="com.Fullload_CDC.OracleToAdlsCDC"/>
        <method signature="OracleToAdlsCDC.verifyAddDataFlow()[pri:33, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyAddDataFlow" class="com.Fullload_CDC.OracleToAdlsCDC"/>
        <method signature="OracleToAdlsCDC.verifyScheduledFlow()[pri:34, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyScheduledFlow" class="com.Fullload_CDC.OracleToAdlsCDC"/>
        <method signature="OracleToAdlsCDC.verifyDataFlowOnMontioringScreen()[pri:35, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyDataFlowOnMontioringScreen" class="com.Fullload_CDC.OracleToAdlsCDC"/>
        <method signature="OracleToAdlsCDC.verifyDeleteScheduledFlow()[pri:36, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyDeleteScheduledFlow" class="com.Fullload_CDC.OracleToAdlsCDC"/>
        <method signature="OracleToAdlsCDC.verifyRescheduled()[pri:37, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyRescheduled" class="com.Fullload_CDC.OracleToAdlsCDC"/>
        <method signature="OracleToAdlsCDC.verifyFlowOnMontioringScren()[pri:38, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyFlowOnMontioringScren" class="com.Fullload_CDC.OracleToAdlsCDC"/>
        <method signature="SqltoAzuresql.verifySourceAdd()[pri:1, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="verifySourceAdd" class="com.Fullload_CDC.SqltoAzuresql"/>
        <method signature="SqltoAzuresql.verifyAddDestination()[pri:2, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="verifyAddDestination" class="com.Fullload_CDC.SqltoAzuresql"/>
        <method signature="SqltoAzuresql.verifyAddDataFlow()[pri:3, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="verifyAddDataFlow" class="com.Fullload_CDC.SqltoAzuresql"/>
        <method signature="SqltoAzuresql.verifyScheduledFlow()[pri:4, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="verifyScheduledFlow" class="com.Fullload_CDC.SqltoAzuresql"/>
        <method signature="SqltoAzuresql.verifyFlowOnMontioringScreen()[pri:5, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="verifyFlowOnMontioringScreen" class="com.Fullload_CDC.SqltoAzuresql"/>
      </group> <!-- Smoke -->
    </groups>
    <test name="CloudBlaze Tests" duration-ms="2567916" started-at="2020-04-14T06:42:09Z" finished-at="2020-04-14T07:24:57Z">
      <class name="com.Fullload_CDC.OracleToAdlsCDC">
        <test-method status="PASS" signature="verifySourceAdd()[pri:31, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifySourceAdd" duration-ms="41643" started-at="2020-04-14T07:11:19Z" finished-at="2020-04-14T07:12:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySourceAdd -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T07:12:01Z" finished-at="2020-04-14T07:12:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySourceAdd status=SUCCESS method=OracleToAdlsCDC.verifySourceAdd()[pri:31, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyAddDestination()[pri:32, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyAddDestination" duration-ms="16886" started-at="2020-04-14T07:12:01Z" depends-on-methods="com.Fullload_CDC.OracleToAdlsCDC.verifySourceAdd" finished-at="2020-04-14T07:12:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDestination -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T07:12:17Z" finished-at="2020-04-14T07:12:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddDestination status=SUCCESS method=OracleToAdlsCDC.verifyAddDestination()[pri:32, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyAddDataFlow()[pri:33, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyAddDataFlow" duration-ms="65471" started-at="2020-04-14T07:12:17Z" depends-on-methods="com.Fullload_CDC.OracleToAdlsCDC.verifyAddDestination" finished-at="2020-04-14T07:13:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDataFlow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T07:13:23Z" finished-at="2020-04-14T07:13:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddDataFlow status=SUCCESS method=OracleToAdlsCDC.verifyAddDataFlow()[pri:33, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyScheduledFlow()[pri:34, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyScheduledFlow" duration-ms="20846" started-at="2020-04-14T07:13:23Z" depends-on-methods="com.Fullload_CDC.OracleToAdlsCDC.verifyAddDataFlow" finished-at="2020-04-14T07:13:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyScheduledFlow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="getResult" is-config="true" duration-ms="1" started-at="2020-04-14T07:13:44Z" finished-at="2020-04-14T07:13:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyScheduledFlow status=SUCCESS method=OracleToAdlsCDC.verifyScheduledFlow()[pri:34, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyDataFlowOnMontioringScreen()[pri:35, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyDataFlowOnMontioringScreen" duration-ms="663385" started-at="2020-04-14T07:13:44Z" depends-on-methods="com.Fullload_CDC.OracleToAdlsCDC.verifyScheduledFlow" finished-at="2020-04-14T07:24:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDataFlowOnMontioringScreen -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T07:24:47Z" finished-at="2020-04-14T07:24:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyDataFlowOnMontioringScreen status=SUCCESS method=OracleToAdlsCDC.verifyDataFlowOnMontioringScreen()[pri:35, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="FAIL" signature="verifyDeleteScheduledFlow()[pri:36, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyDeleteScheduledFlow" duration-ms="9512" started-at="2020-04-14T07:24:47Z" depends-on-methods="com.Fullload_CDC.OracleToAdlsCDC.verifyDataFlowOnMontioringScreen" finished-at="2020-04-14T07:24:57Z">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='root']//div/table/tbody/tr[1]/td[2][text()='DataFlowOracletoADLSCDC']/..//a[2]"}
  (Session info: chrome=80.0.3987.163)
For documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.12.0', revision: '7c6e0b3', time: '2018-05-08T14:04:26.12Z'
System info: host: 'LAPTOP-2G86F66K', ip: '192.168.29.96', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_181'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 80.0.3987.163, chrome: {chromedriverVersion: 80.0.3987.16 (320f6526c1632..., userDataDir: C:\Users\Lenovo\AppData\Loc...}, goog:chromeOptions: {debuggerAddress: localhost:51565}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 031b7c13e670a529f1c02fc9ff2556d3
*** Element info: {Using=xpath, value=//*[@id='root']//div/table/tbody/tr[1]/td[2][text()='DataFlowOracletoADLSCDC']/..//a[2]}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='root']//div/table/tbody/tr[1]/td[2][text()='DataFlowOracletoADLSCDC']/..//a[2]"}
  (Session info: chrome=80.0.3987.163)
For documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.12.0', revision: '7c6e0b3', time: '2018-05-08T14:04:26.12Z'
System info: host: 'LAPTOP-2G86F66K', ip: '192.168.29.96', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_181'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 80.0.3987.163, chrome: {chromedriverVersion: 80.0.3987.16 (320f6526c1632..., userDataDir: C:\Users\Lenovo\AppData\Loc...}, goog:chromeOptions: {debuggerAddress: localhost:51565}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 031b7c13e670a529f1c02fc9ff2556d3
*** Element info: {Using=xpath, value=//*[@id='root']//div/table/tbody/tr[1]/td[2][text()='DataFlowOracletoADLSCDC']/..//a[2]}
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:317)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:419)
at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:309)
at com.Fullload_CDC.OracleToAdlsCDC.verifyDeleteScheduledFlow(OracleToAdlsCDC.java:212)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDeleteScheduledFlow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="getResult" is-config="true" duration-ms="717" started-at="2020-04-14T07:24:57Z" finished-at="2020-04-14T07:24:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyDeleteScheduledFlow status=FAILURE method=OracleToAdlsCDC.verifyDeleteScheduledFlow()[pri:36, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="SKIP" signature="verifyRescheduled()[pri:37, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyRescheduled" duration-ms="0" started-at="2020-04-14T07:24:57Z" depends-on-methods="com.Fullload_CDC.OracleToAdlsCDC.verifyDeleteScheduledFlow" finished-at="2020-04-14T07:24:57Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method OracleToAdlsCDC.verifyRescheduled()[pri:37, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method OracleToAdlsCDC.verifyRescheduled()[pri:37, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:887)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRescheduled -->
        <test-method status="SKIP" signature="verifyFlowOnMontioringScren()[pri:38, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248]" name="verifyFlowOnMontioringScren" duration-ms="0" started-at="2020-04-14T07:24:57Z" depends-on-methods="com.Fullload_CDC.OracleToAdlsCDC.verifyRescheduled" finished-at="2020-04-14T07:24:57Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method OracleToAdlsCDC.verifyFlowOnMontioringScren()[pri:38, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method OracleToAdlsCDC.verifyFlowOnMontioringScren()[pri:38, instance:com.Fullload_CDC.OracleToAdlsCDC@28f3b248] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:887)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFlowOnMontioringScren -->
      </class> <!-- com.Fullload_CDC.OracleToAdlsCDC -->
      <class name="com.Fullload_CDC.FullLoad">
        <test-method status="PASS" signature="verifySystemParams()[pri:11, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifySystemParams" duration-ms="6515" started-at="2020-04-14T06:50:59Z" finished-at="2020-04-14T06:51:05Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySystemParams -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T06:51:05Z" finished-at="2020-04-14T06:51:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySystemParams status=SUCCESS method=FullLoad.verifySystemParams()[pri:11, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyServicePrinciple()[pri:12, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyServicePrinciple" duration-ms="3536" started-at="2020-04-14T06:51:05Z" depends-on-methods="com.Fullload_CDC.FullLoad.verifySystemParams" finished-at="2020-04-14T06:51:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyServicePrinciple -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T06:51:09Z" finished-at="2020-04-14T06:51:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyServicePrinciple status=SUCCESS method=FullLoad.verifyServicePrinciple()[pri:12, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifySubscription()[pri:13, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifySubscription" duration-ms="4089" started-at="2020-04-14T06:51:09Z" depends-on-methods="com.Fullload_CDC.FullLoad.verifyServicePrinciple" finished-at="2020-04-14T06:51:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySubscription -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T06:51:13Z" finished-at="2020-04-14T06:51:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySubscription status=SUCCESS method=FullLoad.verifySubscription()[pri:13, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyAddDataFactory()[pri:14, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyAddDataFactory" duration-ms="5566" started-at="2020-04-14T06:51:13Z" depends-on-methods="com.Fullload_CDC.FullLoad.verifySubscription" finished-at="2020-04-14T06:51:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDataFactory -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T06:51:18Z" finished-at="2020-04-14T06:51:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddDataFactory status=SUCCESS method=FullLoad.verifyAddDataFactory()[pri:14, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyAddSendgrid()[pri:15, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyAddSendgrid" duration-ms="3469" started-at="2020-04-14T06:51:18Z" depends-on-methods="com.Fullload_CDC.FullLoad.verifyAddDataFactory" finished-at="2020-04-14T06:51:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddSendgrid -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T06:51:22Z" finished-at="2020-04-14T06:51:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddSendgrid status=SUCCESS method=FullLoad.verifyAddSendgrid()[pri:15, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyAddAzureFunction()[pri:16, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyAddAzureFunction" duration-ms="3429" started-at="2020-04-14T06:51:22Z" depends-on-methods="com.Fullload_CDC.FullLoad.verifyAddSendgrid" finished-at="2020-04-14T06:51:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddAzureFunction -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T06:51:25Z" finished-at="2020-04-14T06:51:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddAzureFunction status=SUCCESS method=FullLoad.verifyAddAzureFunction()[pri:16, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifySourceAdd()[pri:17, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifySourceAdd" duration-ms="46983" started-at="2020-04-14T06:51:25Z" depends-on-methods="com.Fullload_CDC.FullLoad.verifyAddAzureFunction" finished-at="2020-04-14T06:52:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySourceAdd -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T06:52:12Z" finished-at="2020-04-14T06:52:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySourceAdd status=SUCCESS method=FullLoad.verifySourceAdd()[pri:17, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyAddDestination()[pri:18, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyAddDestination" duration-ms="16900" started-at="2020-04-14T06:52:12Z" depends-on-methods="com.Fullload_CDC.FullLoad.verifySourceAdd" finished-at="2020-04-14T06:52:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDestination -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="1" started-at="2020-04-14T06:52:29Z" finished-at="2020-04-14T06:52:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddDestination status=SUCCESS method=FullLoad.verifyAddDestination()[pri:18, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyAddDataFlow()[pri:19, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyAddDataFlow" duration-ms="64522" started-at="2020-04-14T06:52:29Z" depends-on-methods="com.Fullload_CDC.FullLoad.verifyAddDestination" finished-at="2020-04-14T06:53:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDataFlow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T06:53:34Z" finished-at="2020-04-14T06:53:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddDataFlow status=SUCCESS method=FullLoad.verifyAddDataFlow()[pri:19, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyScheduledFlow()[pri:20, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyScheduledFlow" duration-ms="18248" started-at="2020-04-14T06:53:34Z" depends-on-methods="com.Fullload_CDC.FullLoad.verifyAddDataFlow" finished-at="2020-04-14T06:53:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyScheduledFlow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="1" started-at="2020-04-14T06:53:52Z" finished-at="2020-04-14T06:53:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyScheduledFlow status=SUCCESS method=FullLoad.verifyScheduledFlow()[pri:20, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyFlowOnMontioringScreen()[pri:21, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="verifyFlowOnMontioringScreen" duration-ms="1047069" started-at="2020-04-14T06:53:52Z" depends-on-methods="com.Fullload_CDC.FullLoad.verifyScheduledFlow" finished-at="2020-04-14T07:11:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFlowOnMontioringScreen -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.FullLoad@429bffaa]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T07:11:19Z" finished-at="2020-04-14T07:11:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyFlowOnMontioringScreen status=SUCCESS method=FullLoad.verifyFlowOnMontioringScreen()[pri:21, instance:com.Fullload_CDC.FullLoad@429bffaa] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- com.Fullload_CDC.FullLoad -->
      <class name="com.Fullload_CDC.SqltoAzuresql">
        <test-method status="PASS" signature="Report(java.lang.String)[pri:0, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="Report" is-config="true" duration-ms="296" started-at="2020-04-14T06:42:09Z" finished-at="2020-04-14T06:42:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[https://cloudblaze-ui-react.azurewebsites.net/#]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Report -->
        <test-method status="PASS" signature="init(java.lang.String)[pri:0, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="init" is-config="true" duration-ms="29733" started-at="2020-04-14T06:42:10Z" finished-at="2020-04-14T06:42:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[https://cloudblaze-ui-react.azurewebsites.net/#]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="verifySourceAdd()[pri:1, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="verifySourceAdd" duration-ms="51088" started-at="2020-04-14T06:42:40Z" finished-at="2020-04-14T06:43:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySourceAdd -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="getResult" is-config="true" duration-ms="3" started-at="2020-04-14T06:43:31Z" finished-at="2020-04-14T06:43:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifySourceAdd status=SUCCESS method=SqltoAzuresql.verifySourceAdd()[pri:1, instance:com.Fullload_CDC.SqltoAzuresql@3c73951] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyAddDestination()[pri:2, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="verifyAddDestination" duration-ms="21916" started-at="2020-04-14T06:43:31Z" depends-on-methods="com.Fullload_CDC.SqltoAzuresql.verifySourceAdd" finished-at="2020-04-14T06:43:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDestination -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="getResult" is-config="true" duration-ms="1" started-at="2020-04-14T06:43:53Z" finished-at="2020-04-14T06:43:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddDestination status=SUCCESS method=SqltoAzuresql.verifyAddDestination()[pri:2, instance:com.Fullload_CDC.SqltoAzuresql@3c73951] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyAddDataFlow()[pri:3, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="verifyAddDataFlow" duration-ms="42754" started-at="2020-04-14T06:43:53Z" depends-on-methods="com.Fullload_CDC.SqltoAzuresql.verifyAddDestination" finished-at="2020-04-14T06:44:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyAddDataFlow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="getResult" is-config="true" duration-ms="1" started-at="2020-04-14T06:44:35Z" finished-at="2020-04-14T06:44:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyAddDataFlow status=SUCCESS method=SqltoAzuresql.verifyAddDataFlow()[pri:3, instance:com.Fullload_CDC.SqltoAzuresql@3c73951] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyScheduledFlow()[pri:4, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="verifyScheduledFlow" duration-ms="17747" started-at="2020-04-14T06:44:35Z" depends-on-methods="com.Fullload_CDC.SqltoAzuresql.verifyAddDataFlow" finished-at="2020-04-14T06:44:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyScheduledFlow -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="getResult" is-config="true" duration-ms="1" started-at="2020-04-14T06:44:53Z" finished-at="2020-04-14T06:44:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyScheduledFlow status=SUCCESS method=SqltoAzuresql.verifyScheduledFlow()[pri:4, instance:com.Fullload_CDC.SqltoAzuresql@3c73951] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="verifyFlowOnMontioringScreen()[pri:5, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="verifyFlowOnMontioringScreen" duration-ms="365504" started-at="2020-04-14T06:44:53Z" depends-on-methods="com.Fullload_CDC.SqltoAzuresql.verifyScheduledFlow" finished-at="2020-04-14T06:50:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFlowOnMontioringScreen -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="getResult" is-config="true" duration-ms="0" started-at="2020-04-14T06:50:59Z" finished-at="2020-04-14T06:50:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyFlowOnMontioringScreen status=SUCCESS method=SqltoAzuresql.verifyFlowOnMontioringScreen()[pri:5, instance:com.Fullload_CDC.SqltoAzuresql@3c73951] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.Fullload_CDC.SqltoAzuresql@3c73951]" name="tearDown" is-config="true" duration-ms="200" started-at="2020-04-14T07:24:57Z" finished-at="2020-04-14T07:24:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.Fullload_CDC.SqltoAzuresql -->
    </test> <!-- CloudBlaze Tests -->
  </suite> <!-- CloudBlaze Automation -->
</testng-results>
